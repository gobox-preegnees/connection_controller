// Code generated by MockGen. DO NOT EDIT.
// Source: http.go

// Package mock_http is a generated GoMock package.
package mock_http

import (
	context "context"
	reflect "reflect"

	entity "github.com/gobox-preegnees/connection_controller/internal/domain/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockIUsecase is a mock of IUsecase interface.
type MockIUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIUsecaseMockRecorder
}

// MockIUsecaseMockRecorder is the mock recorder for MockIUsecase.
type MockIUsecaseMockRecorder struct {
	mock *MockIUsecase
}

// NewMockIUsecase creates a new mock instance.
func NewMockIUsecase(ctrl *gomock.Controller) *MockIUsecase {
	mock := &MockIUsecase{ctrl: ctrl}
	mock.recorder = &MockIUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUsecase) EXPECT() *MockIUsecaseMockRecorder {
	return m.recorder
}

// DeleteStream mocks base method.
func (m *MockIUsecase) DeleteStream(ctx context.Context, stream entity.Stream) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStream", ctx, stream)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStream indicates an expected call of DeleteStream.
func (mr *MockIUsecaseMockRecorder) DeleteStream(ctx, stream interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStream", reflect.TypeOf((*MockIUsecase)(nil).DeleteStream), ctx, stream)
}

// GetConsistency mocks base method.
func (m *MockIUsecase) GetConsistency(ctx context.Context) (entity.Consistency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConsistency", ctx)
	ret0, _ := ret[0].(entity.Consistency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConsistency indicates an expected call of GetConsistency.
func (mr *MockIUsecaseMockRecorder) GetConsistency(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConsistency", reflect.TypeOf((*MockIUsecase)(nil).GetConsistency), ctx)
}

// SaveSnapshot mocks base method.
func (m *MockIUsecase) SaveSnapshot(ctx context.Context, snapshot entity.Snapshot) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSnapshot", ctx, snapshot)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSnapshot indicates an expected call of SaveSnapshot.
func (mr *MockIUsecaseMockRecorder) SaveSnapshot(ctx, snapshot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSnapshot", reflect.TypeOf((*MockIUsecase)(nil).SaveSnapshot), ctx, snapshot)
}

// SaveStream mocks base method.
func (m *MockIUsecase) SaveStream(ctx context.Context, stream entity.Stream) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveStream", ctx, stream)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveStream indicates an expected call of SaveStream.
func (mr *MockIUsecaseMockRecorder) SaveStream(ctx, stream interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveStream", reflect.TypeOf((*MockIUsecase)(nil).SaveStream), ctx, stream)
}
