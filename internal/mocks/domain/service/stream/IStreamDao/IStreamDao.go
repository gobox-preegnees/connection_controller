// Code generated by MockGen. DO NOT EDIT.
// Source: stream.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	storage "github.com/gobox-preegnees/connection_controller/internal/adapter/dao"
	gomock "github.com/golang/mock/gomock"
)

// MockIStreamDao is a mock of IStreamDao interface.
type MockIStreamDao struct {
	ctrl     *gomock.Controller
	recorder *MockIStreamDaoMockRecorder
}

// MockIStreamDaoMockRecorder is the mock recorder for MockIStreamDao.
type MockIStreamDaoMockRecorder struct {
	mock *MockIStreamDao
}

// NewMockIStreamDao creates a new mock instance.
func NewMockIStreamDao(ctrl *gomock.Controller) *MockIStreamDao {
	mock := &MockIStreamDao{ctrl: ctrl}
	mock.recorder = &MockIStreamDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIStreamDao) EXPECT() *MockIStreamDaoMockRecorder {
	return m.recorder
}

// CreateOneStream mocks base method.
func (m *MockIStreamDao) CreateOneStream(req storage.CreateOneStreamReqDTO) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOneStream", req)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOneStream indicates an expected call of CreateOneStream.
func (mr *MockIStreamDaoMockRecorder) CreateOneStream(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOneStream", reflect.TypeOf((*MockIStreamDao)(nil).CreateOneStream), req)
}

// DeleteOneStream mocks base method.
func (m *MockIStreamDao) DeleteOneStream(req storage.DeleteOneStreamReqDTO) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOneStream", req)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOneStream indicates an expected call of DeleteOneStream.
func (mr *MockIStreamDaoMockRecorder) DeleteOneStream(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOneStream", reflect.TypeOf((*MockIStreamDao)(nil).DeleteOneStream), req)
}
